#!/usr/bin/perl -w

# Copyright (c) 2015 Christian Jaeger, copying@christianjaeger.ch
# This is free software. See the file COPYING.md that came bundled
# with this file.

use strict; use warnings; use warnings FATAL => 'uninitialized';
use Function::Parameters qw(:strict);
#use Sub::Call::Tail;

# find modules from functional-perl working directory (not installed)
use Cwd 'abs_path';
our ($mydir, $myname); BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/../lib";


sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file(s)

  Hack to prepare an outgoing mail file (as saved in a Maildir) for
  sending through 'sendmail -t'. It simply removes and adds some mail
  headers. It replaces the given file(s) with the modified one(s).
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage}) or exit 1;

#use Chj::Trapl; use Chj::repl;
use FP::List;
use FP::Weak qw(Keep);
use FP::IOStream qw(xfile_replace_lines);
use FP::Ops qw(regex_match);
use FP::Predicates qw(complement either);
# ^ should these (also) be in FP::Combinators?

# do not warn about failures to keep owner, or backups, due to
# different user than owner
local $Chj::IO::Tempfile::warn_all_failures= 0;


sub strings_any_regex {
    join ("|", map { quotemeta $_ } @_)
}


# This ad-hoc mail "parser" unsafely assumes that the headers we're
# interested in consist of one line only

fun fixlines ($orig) {
    my $head= Keep($orig)->take_while (complement regex_match qr/^\n\z/s);
    my $rest= $orig->drop(Keep($head)->length);
    # ^ XX add a `take_while_and_rest` to get both at the same time?

    my $from= Keep($head)->filter (regex_match qr/^From:/)->xone;
    my ($fromaddr)= $from=~ m@<([^<>]+)>@s
      or die "missing from address in '$from'";
    my ($fromwhole)= $from=~ m@.?: *([^\n]*)@s
      or die "?";

    my $cleaned_head= $head->filter
      (complement
       regex_match ("^".
		    strings_any_regex (qw(Return-Path
					  BCC
					  X-K9mail-Identity
					  User-Agent
					  Date)).
		    ":"));

    (cons "Return-Path: <$fromaddr>\n",
     cons "BCC: $fromwhole\n",
     $cleaned_head->append($rest))
}

fun sendprepare ($path) {
    xfile_replace_lines $path, *fixlines;
}

sendprepare $_ for @ARGV;

