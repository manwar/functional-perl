#!/usr/bin/perl -w

use strict; use warnings FATAL => 'uninitialized';

# find modules from functional-perl working directory (not installed)
use Cwd 'abs_path';
our ($mydir, $myname); BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib "$mydir/../perllib";
use lib "$mydir/../lib";
use lib "$mydir/../ftemplate/lib";


# example module use:
use Chj::FP2::List ":all";
use Chj::FP::ArrayUtil ":all";
use Chj::FP::Array_sort ":all";
use Chj::FP2::Stream ":all";
use Chj::FP2::Lazy ":all";

# for development/debugging
use Chj::ruse;
use Chj::Backtrace;
use Chj::repl;

sub mult {
    my ($x,$y) = @_;
    sub {
	my ($z) = @_;
	$x * $y - $z
    }
}


# recursive factorial:

sub fact {
    my ($x) = @_;
    warn "x=$x";
    if ($x < 2) {
	1
    } else {
	$x * fact ($x - 1)
    }
}


# iterative factorial:

our @imperative_giveme;

sub imperative_fact {
    my ($x) = @_;
    my $res= 1;
    while (1) {
	push @imperative_giveme, sub {
	    ($x,$res)
	};
	if ($x < 2) {
	    return $res;
	} else {
	    $res= $x * $res;
	    $x = $x - 1;
	}
    }
}	

our @functional_giveme;

sub functional_fact_iter {
    my ($x, $res) = @_;
    push @functional_giveme, sub {
	($x,$res)
    };
    if ($x < 2) {
	return $res;
    } else {
	functional_fact_iter($x - 1,  $x * $res)
    }
}	

sub functional_fact {
    my ($x)= @_;
    functional_fact_iter($x, 1)
}

sub iota {
    my ($from, $to)=@_;
    if ($from >= $to) {
	undef
    } else {
	cons $from, iota($from + 1, $to)
    }
}

repl;
