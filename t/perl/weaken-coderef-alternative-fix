#!/usr/bin/env perl

use strict; use warnings; use warnings FATAL => 'uninitialized';

use Scalar::Util 'weaken';

@ARGV==3 or die "usage: $0 impl n m";
our ($impl, $n, $m) = @ARGV;

sub fix ($);

*fix= [
    # choice of implementations

    # Y combinator
    do {
	my $fix0= sub {
	    my ($fix0, $f)=@_;
	    sub {
		@_=(&$fix0 ($fix0, $f), @_); goto $f;
	    }
	};
	sub ($) {
	    my ($f)=@_;
	    &$fix0 ($fix0, $f)
	}
    },

    # self-referencing through package variable
    sub ($) {
	my ($f)=@_;
	sub {
	    #@_=(fix ($f), @_); goto $f;
	    unshift @_, fix ($f); goto $f;
	}
    },

    # locally self-referencing 
    sub ($) {
	my ($f)=@_;
	my $f2; $f2= sub {
	    unshift @_, $f2; goto $f
	};
	my $f2_=$f2; weaken $f2; $f2_
    },

    ]->[$impl];


sub foo {
    my $f= fix sub {
	my ($f, $n)= @_;
	sub {
	    if ($n > 0) {
		$n + &{&$f($n - 1)}
	    } else {
		0
	    }
	}
    };
    &$f;
}


my $res;
$res= &{foo $n}
  for 1..$m;

print $res,"\n";

