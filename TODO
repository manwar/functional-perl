- clean up licensing (some files currently are MIT license even though
  COPYING claims Perl licensing)

- more `intro/`, more `examples/`

- more tests:

  - +-systematic stream leak testing

[- additionally add old-style FP modules from chj-perllib?]

- xopen_read etc. are throwing exceptions; there are no non-throwing
  variants currently. What interface is preferred for handling errors:
  maybe_ variants that return undef (then assume the error is in $! ?),
  give exceptions types so as to catch them selectively, something
  else?

- decide whether to offer methods to shorten names like stream_*
  (I'm inclined against it)

- replace Chj::FP::Lazy with Data::Thunk? This would be cool from a
  transparency stand point, except that separate code by way of
  dynamic dispatch (method calls) *can't* be used anymore then, and
  thus the only code always needs to do the environment cleaning,
  which is bad from a usability perspective since users not working
  with lazy data will still have their variables (unexpectedly)
  deleted. Also, when a Data::Thunk thunk (promise) fails, it won't be
  run again and is instead silently casted to e.g. an integer in
  number context, which will be a usability neightmare.

- replace Chj::IO::* with something else?

- work on getting perl issues fixed, see failing tests `t/perl-*`

- messages "expecting 2 arguments" are unclear and inconsistently
  used for functions reused as methods. How should it be? `flip`
  should work, for example, so do we have to live with methods
  including $self in their argument count?

- should to_string etc. methods be renamed without the to_ prefix?

- which of the car, cdr etc. accessors should weaken their argument in
  the case of streams?

