#!/usr/bin/env perl

# dependencies of *this* script?: some modules => chj-perllib,
# straceopens => chj-bin

use strict; use warnings; use warnings FATAL => 'uninitialized';

BEGIN {
    $0 =~ m{^(?:\./+)?meta/+dependencycheck}
      or die "Please run me from the functional-perl toplevel dir!";
}

use v5.10;
use Chj::IO::Command;
use Chj::xtmpfile;
use lib "./lib";
use FP::ArrayUtil ":all";
use FP::Div ":all";
use Chj::xperlfunc;
use Chj::xopen 'xopen_read';

our $verbose= $ENV{VERBOSE};

our $files= do {
    my $files= Chj::IO::Command->new_sender(qw(git ls-files -z));
    local $/="\0";
    my $r= [ <$files> ];
    $files->xxfinish;
    $r
};

our $namespaces=
  array_filter sub { $_[0] ne "Class::Array" },
  array_filter \&identity,
  array_map sub {
    my ($file)=@_;
    $file=~ m{lib/(.*)\.pm} ? do {
	my $str= $1;
	$str=~ s{/}{::}sg;
	$str
    } : undef;
}, $files;

our $out= xtmpfile;

for my $ns (@$namespaces) {
    my $tr= Chj::IO::Command->new_combinedsender
      ("straceopens",
       qw(perl -w -Mlib=./lib),
       "-M$ns", "-e", "");
    $tr->xsendfile_to($out);
    $tr->xxfinish;
}

$out->xclose;

our $in= xopen_read $out->path; # bleh?
our %o;
while (<$in>) {
    chomp;
    $o{$_}++ if (m{^/} and m{/(?:Chj|FP|PXML)/}); # not |Class
}

$in->xclose;

say $_ for sort keys %o;

#use Chj::repl;repl;
